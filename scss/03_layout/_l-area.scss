@use 'sass:list';

$area_permutations: (
    1: ("a"),
    
    2: ("ab",
        "ba"),

    3: ("abc",
        "acb",
        "bac",
        "bca",
        "cab",
        "cba"),

    4: ("abcd",
        "bacd",
        "cabd",
        "acbd",
        "bcad",
        "cbad",
        "cbda",
        "bcda",
        "dcba",
        "cdba",
        "bdca",
        "dbca",
        "dacb",
        "adcb",
        "cdab",
        "dcab",
        "acdb",
        "cadb",
        "badc",
        "abdc",
        "dbac",
        "bdac",
        "adbc",
        "dabc")
);

.l-area {
    @each $area_num, $area_type in $area_permutations {
        &-#{$area_num} {
            display: grid;

            // Default areas without modifier
            grid-template-areas: list.nth($area_type, 1);

            @each $areas in $area_type {
                &--#{$areas} {
                    // Default with modifier and no direction
                    grid-template-areas: $areas;
                    
                    // Vertical
                    &-vertical {
                        $template-vertical: null;

                        @for $area_index from 1 through str-length($areas) {
                            $template-vertical: $template-vertical + "\"" + str-slice($areas, $area_index, $area_index) + "\"";
                        }

                        grid-template-areas: unquote($template-vertical);
                    }

                    // Horizontal
                    &-horizontal {
                        $template-horizontal: null;

                        @for $area_index from 1 through str-length($areas) {
                            $template-horizontal: $template-horizontal + str-slice($areas, $area_index, $area_index) + " ";
                        }

                        grid-template-areas: $template-horizontal;
                    }
                }
            }
        }

        // Childs
        $curr_area_type: list.nth($area_type, 1);

        @for $area_item from 1 through str-length($curr_area_type) {
            $area: str-slice($curr_area_type, $area_item, $area_item);

            &__#{$area} {
                grid-area: unquote($area);
            }
        }
    }
}

////////////////
// RESPONSIVE //
////////////////
@each $size_name, $size in $media_sizes {
    @media (min-width: $size) {
        @if($media-position == 'right') {
            .l-area {
                @each $area_num, $area_type in $area_permutations {
                    &-#{$area_num}#{$media-separator}#{$size_name} {
                        display: grid;
            
                        // Default areas without modifier
                        grid-template-areas: list.nth($area_type, 1);
                    }

                    &-#{$area_num} {
                        @each $areas in $area_type {
                            &--#{$areas}#{$media-separator}#{$size_name} {
                                // Default with modifier and no direction
                                grid-template-areas: $areas;
                            }

                            &--#{$areas} {
                                // Vertical
                                &-vertical#{$media-separator}#{$size_name} {
                                    $template-vertical: null;
            
                                    @for $area_index from 1 through str-length($areas) {
                                        $template-vertical: $template-vertical + "\"" + str-slice($areas, $area_index, $area_index) + "\"";
                                    }
            
                                    grid-template-areas: unquote($template-vertical);
                                }
            
                                // Horizontal
                                &-horizontal#{$media-separator}#{$size_name} {
                                    $template-horizontal: null;
            
                                    @for $area_index from 1 through str-length($areas) {
                                        $template-horizontal: $template-horizontal + str-slice($areas, $area_index, $area_index) + " ";
                                    }
            
                                    grid-template-areas: $template-horizontal;
                                }
                            }
                        }
                    }
            
                    // Childs
                    $curr_area_type: list.nth($area_type, 1);
            
                    @for $area_item from 1 through str-length($curr_area_type) {
                        $area: str-slice($curr_area_type, $area_item, $area_item);
            
                        &__#{$area}#{$media-separator}#{$size_name} {
                            grid-area: unquote($area);
                        }
                    }
                }
            }
        } @else {
            .#{$size_name}#{$media-separator}l-area {
                @each $area_num, $area_type in $area_permutations {
                    &-#{$area_num} {
                        display: grid;
            
                        // Default areas without modifier
                        grid-template-areas: list.nth($area_type, 1);
            
                        @each $areas in $area_type {
                            &--#{$areas} {
                                // Default with modifier and no direction
                                grid-template-areas: $areas;
                                
                                // Vertical
                                &-vertical {
                                    $template-vertical: null;
            
                                    @for $area_index from 1 through str-length($areas) {
                                        $template-vertical: $template-vertical + "\"" + str-slice($areas, $area_index, $area_index) + "\"";
                                    }
            
                                    grid-template-areas: unquote($template-vertical);
                                }
            
                                // Horizontal
                                &-horizontal {
                                    $template-horizontal: null;
            
                                    @for $area_index from 1 through str-length($areas) {
                                        $template-horizontal: $template-horizontal + str-slice($areas, $area_index, $area_index) + " ";
                                    }
            
                                    grid-template-areas: $template-horizontal;
                                }
                            }
                        }
                    }
            
                    // Childs
                    $curr_area_type: list.nth($area_type, 1);
            
                    @for $area_item from 1 through str-length($curr_area_type) {
                        $area: str-slice($curr_area_type, $area_item, $area_item);
            
                        &__#{$area} {
                            grid-area: unquote($area);
                        }
                    }
                }
            }
        }
    }
}